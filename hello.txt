Node.js 缓冲区接受它们接收到的编码字符串的所有大小写变体。 例如，UTF-8 可以指定为 'utf8'、'UTF8' 或 'uTf8'。

Node.js 目前支持的字符编码如下：

'utf8'（别名：'utf-8'）：多字节编码的 Unicode 字符。 许多网页和其他文档格式使用 UTF-8。 这是默认的字符编码。 当将 Buffer 解码为不完全包含有效 UTF-8 数据的字符串时，则 Unicode 替换字符 U+FFFD � 将用于表示这些错误。

'utf16le'（别名：'utf-16le'）：多字节编码的 Unicode 字符。 与 'utf8' 不同，字符串中的每个字符都将使用 2 或 4 个字节进行编码。 Node.js 仅支持 UTF-16 的小端序变体。

'latin1': Latin-1 代表 ISO-8859-1。 此字符编码仅支持 U+0000 至 U+00FF 的 Unicode 字符。 每个字符都使用单个字节进行编码。 不符合该范围的字符将被截断并映射到该范围内的字符。

使用以上编码之一将 Buffer 转换为字符串称为解码，将字符串转换为 Buffer 称为编码。

Node.js 还支持以下二进制转文本的编码。 对于二进制转文本的编码，命名约定是相反的：将 Buffer 转换为字符串通常称为编码，将字符串转换为 Buffer 通常称为解码。

'base64': Base64 编码。 当从字符串创建 Buffer 时，此编码还将正确接受 RFC 4648，第 5 节中指定的 "URL 和文件名安全字母表"。 base64 编码的字符串中包含的空白字符（例如空格、制表符和换行符）会被忽略。

'base64url': base64url 编码如 RFC 4648 第 5 节中指定。 当从字符串创建 Buffer 时，此编码也将正确接受常规的 base64 编码的字符串。 当将 Buffer 编码为字符串时，此编码将忽略填充。

'hex': 将每个字节编码为两个十六进制字符。 当解码不完全由偶数个十六进制字符组成的字符串时，可能会发生数据截断。 请参阅下面的示例。